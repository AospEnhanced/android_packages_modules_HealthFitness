/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.healthconnect;

import android.annotation.NonNull;
import android.annotation.Nullable;
import android.healthconnect.datatypes.Metadata;
import android.healthconnect.datatypes.Record;

import java.util.Objects;

/** A class to represent filtering based on record id */
public class RecordIdFilter {
    /** Builder class for {@link RecordIdFilter} */
    public static final class Builder {
        private final Class<? extends Record> mRecordType;
        private String mId;
        private String mClientRecordId;

        /**
         * @param recordType Record class for which either the id or client record id must be set.
         */
        public Builder(@NonNull Class<? extends Record> recordType) {
            mRecordType = recordType;
        }

        /**
         * @param id Identifier generated by the platform and returned by {@link
         *     HealthConnectManager#insertRecords}
         *     <p>When both record id and client record id are set, then the id is ignored and only
         *     clientRecordId is used.
         */
        @NonNull
        public Builder setId(@Nullable String id) {
            mId = id;
            return this;
        }

        /**
         * @param clientRecordId Client identifier that was set while inserting the record.
         *     <p>When both record id and client record id are set, then id is ignored and only
         *     clientRecordId is used.
         * @see Metadata
         */
        @NonNull
        public Builder setClientRecordId(@Nullable String clientRecordId) {
            mClientRecordId = clientRecordId;
            return this;
        }

        /**
         * @return Object of {@link RecordIdFilter}
         */
        @NonNull
        public RecordIdFilter build() {
            if (Objects.isNull(mId) && Objects.isNull(mClientRecordId)) {
                throw new IllegalArgumentException(
                        "Either record id or client record id must be set");
            }

            if (mClientRecordId != null) {
                mId = null;
            }
            return new RecordIdFilter(mRecordType, mId, mClientRecordId);
        }
    }

    private final Class<? extends Record> mRecordType;
    private final String mId;
    private final String mClientRecordId;

    /**
     * @see Builder
     */
    private RecordIdFilter(Class<? extends Record> recordType, String id, String clientRecordId) {
        mRecordType = recordType;
        mId = id;
        mClientRecordId = clientRecordId;
    }

    /**
     * @return Record class for this identifier
     */
    @NonNull
    public Class<? extends Record> getRecordType() {
        return mRecordType;
    }

    /**
     * @return Identifier given by the platform
     */
    @Nullable
    public String getId() {
        return mId;
    }

    /**
     * @return Client record identifier
     */
    @Nullable
    public String getClientRecordId() {
        return mClientRecordId;
    }
}
