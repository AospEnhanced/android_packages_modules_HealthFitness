import org.apache.tools.ant.taskdefs.condition.Os

final boolean IS_ARM_MAC = Os.isFamily(Os.FAMILY_MAC) &&
        System.getProperty("os.arch") == "aarch64"

allprojects {
    ext {
        ANDROID_TOP = "${new File("${rootDir}", ANDROID_RELATIVE_TOP).canonicalPath}"
        HC_DIR = "${ANDROID_TOP}/packages/modules/HealthConnect/apk"
        SETTINGS_DIR = "${ANDROID_TOP}/frameworks/base/packages/SettingsLib"
        // We need to explicitly request x86_64 binaries on M1 Macs since protoc compiler
        // for ARM doesn't exist for current protobuf version.
        PROTO_ARCH_SUFFIX = IS_ARM_MAC ? ":osx-x86_64" : ""
    }
}

final String GRADLE_BUILD_ROOT = "${ANDROID_TOP}/out/gradle/build"
buildDir = "${GRADLE_BUILD_ROOT}/${rootProject.name}/build"

gradle.beforeProject {
    rootProject.subprojects {
        buildDir = "${GRADLE_BUILD_ROOT}/${rootProject.name}/${project.name}/build"
    }
}

task updateSdkSources(type:SdkSourceUpdaterTask) {
    androidRoot = new File("${ANDROID_TOP}")
}

final Map<String, String> LIB_VERSION_MAP = new RepoDependencyMapper()
        .mapPath("${ANDROID_TOP}/prebuilts/sdk/current/androidx/m2repository")
        .mapPath("${ANDROID_TOP}/prebuilts/sdk/current/androidx-legacy/m2repository")
        .mapPath("${ANDROID_TOP}/prebuilts/sdk/current/extras/material-design-x")
        .mapPath("${ANDROID_TOP}/prebuilts/sdk/current/extras/constraint-layout-x", "androidx.constraintlayout")
        .mapPath("${ANDROID_TOP}/prebuilts/misc/common/androidx-test")
        .getMap()

allprojects {
    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            // Override any transitive dependency to also use the local version
            String overridenVersion = LIB_VERSION_MAP.get(details.requested.module.toString())
            if (overridenVersion != null) {
                details.useVersion(overridenVersion)
            }
        }
    }
}

tasks.named('wrapper') {
    // Delete gradlew.bat because Windows builds are not supported
    doLast {
        delete "${projectDir}/gradlew.bat"
    }
}
